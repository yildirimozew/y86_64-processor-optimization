.pos 0x0
	irmovq stack, %rsp
    irmovq array_begin1, %rdi
    irmovq array_begin2, %rsi
    irmovq $4, %rdx
    call switch8
    halt

switch8:
loop:
    andq %rdx, %rdx
    jle done:
    
    mrmovq (%rdi), %r8
    mrmovq (%rdi), %r11
    irmovq $8, %r12
    modq %r12, %r8
    mllq %r12, %r8
    jtab table, %r8

    cases_over:
    irmovq $16, %r10
    addq %r10, %r11
    rmmovq %r11, (%rsi)
    irmovq $1, %r10
    subq %r10, %rdx
    irmovq $8, %r10
    addq %r10, %rdi 
    addq %r10, %rsi
    jmp loop
done:
ret


#0 -> add 1
case0:
irmovq $1, %r10
addq %r10, %r11
jmp cases_over

#1 -> multiply by 5
case1:
irmovq $5, %r10
mllq %r10, %r11
jmp cases_over

#2 -> divide by 2
case2:
irmovq $2, %r10
dvvq %r10, %r11
jmp cases_over

#3 -> take mod 3
case3:
irmovq $3, %r10
modq %r10, %r11
jmp cases_over

#4 -> subtract 7
case4:
irmovq $7, %r10
subq %r10, %r11
jmp cases_over

#5 -> make it 331
case5:
irmovq $331, %r11
jmp cases_over

#6 -> add 10
case6:
irmovq $10, %r10
addq %r10, %r11
jmp cases_over

#7 -> divide by 3
case7:
irmovq $3, %r10
dvvq %r10, %r11
jmp cases_over


table:
.quad case0
.quad case1
.quad case2
.quad case3
.quad case4
.quad case5
.quad case6
.quad case7





.pos 0x1000
array_begin1:
.quad 19
.quad 21
.quad 20
.quad 22
array_end1:
.quad 0

.pos 0x1500
array_begin2:
.quad 0
.pos 0x1F00
stack:
.quad 0

