.pos 0x0
	irmovq stack, %rsp
    irmovq array_begin1, %rdi
    irmovq array_begin2, %rsi
    irmovq $64, %rdx
    call switch8
    halt

switch8:
loop:
    andq %rdx, %rdx
    jle done:
    
    mrmovq (%rdi), %r8
    mrmovq (%rdi), %r11
    irmovq $8, %r12
    modq %r12, %r8
    mllq %r12, %r8
    jtab table, %r8

    cases_over:
    irmovq $16, %r10
    addq %r10, %r11
    rmmovq %r11, (%rsi)
    irmovq $1, %r10
    subq %r10, %rdx
    irmovq $8, %r10
    addq %r10, %rdi 
    addq %r10, %rsi
    jmp loop
done:
ret


#0 -> add 1
case0:
irmovq $1, %r10
addq %r10, %r11
jmp cases_over

#1 -> multiply by 5
case1:
irmovq $5, %r10
mllq %r10, %r11
jmp cases_over

#2 -> divide by 2
case2:
irmovq $2, %r10
dvvq %r10, %r11
jmp cases_over

#3 -> take mod 3
case3:
irmovq $3, %r10
modq %r10, %r11
jmp cases_over

#4 -> subtract 7
case4:
irmovq $7, %r10
subq %r10, %r11
jmp cases_over

#5 -> make it 331
case5:
irmovq $331, %r11
jmp cases_over

#6 -> add 10
case6:
irmovq $10, %r10
addq %r10, %r11
jmp cases_over

#7 -> divide by 3
case7:
irmovq $3, %r10
dvvq %r10, %r11
jmp cases_over


table:
.quad case0
.quad case1
.quad case2
.quad case3
.quad case4
.quad case5
.quad case6
.quad case7





.pos 0x1000
array_begin1:
.quad 30
.quad 74
.quad 44
.quad 27
.quad 25
.quad 68
.quad 26
.quad 72
.quad 45
.quad 65
.quad 38
.quad 81
.quad 77
.quad 43
.quad 48
.quad 78
.quad 61
.quad 59
.quad 52
.quad 79
.quad 40
.quad 31
.quad 67
.quad 57
.quad 56
.quad 49
.quad 75
.quad 80
.quad 63
.quad 71
.quad 39
.quad 73
.quad 76
.quad 24
.quad 37
.quad 85
.quad 35
.quad 64
.quad 33
.quad 58
.quad 29
.quad 66
.quad 69
.quad 83
.quad 46
.quad 62
.quad 84
.quad 47
.quad 28
.quad 70
.quad 32
.quad 53
.quad 41
.quad 54
.quad 51
.quad 55
.quad 50
.quad 42
.quad 36
.quad 86
.quad 82
.quad 23
.quad 60
.quad 34
array_end1:
.quad 0

.pos 0x1500
array_begin2:
.quad 0
.pos 0x1F00
stack:
.quad 0

